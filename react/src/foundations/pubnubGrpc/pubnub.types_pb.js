// source: pubnub.types.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */

var jspb = require("google-protobuf");
var goog = jspb;
var global = Function("return this")();

goog.exportSymbol("proto.pubnub.Location", null, global);
goog.exportSymbol("proto.pubnub.PublishResponse", null, global);
goog.exportSymbol("proto.pubnub.PublishResponse.Status", null, global);
goog.exportSymbol("proto.pubnub.Subscription", null, global);
goog.exportSymbol("proto.pubnub.Timetoken", null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pubnub.Subscription = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pubnub.Subscription, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pubnub.Subscription.displayName = "proto.pubnub.Subscription";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pubnub.PublishResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pubnub.PublishResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pubnub.PublishResponse.displayName = "proto.pubnub.PublishResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pubnub.Timetoken = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pubnub.Timetoken, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pubnub.Timetoken.displayName = "proto.pubnub.Timetoken";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pubnub.Location = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pubnub.Location, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pubnub.Location.displayName = "proto.pubnub.Location";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pubnub.Subscription.prototype.toObject = function(opt_includeInstance) {
    return proto.pubnub.Subscription.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pubnub.Subscription} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.pubnub.Subscription.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        channel: jspb.Message.getFieldWithDefault(msg, 1, "")
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pubnub.Subscription}
 */
proto.pubnub.Subscription.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pubnub.Subscription();
  return proto.pubnub.Subscription.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pubnub.Subscription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pubnub.Subscription}
 */
proto.pubnub.Subscription.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setChannel(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pubnub.Subscription.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pubnub.Subscription.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pubnub.Subscription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pubnub.Subscription.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannel();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string channel = 1;
 * @return {string}
 */
proto.pubnub.Subscription.prototype.getChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.pubnub.Subscription} returns this
 */
proto.pubnub.Subscription.prototype.setChannel = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pubnub.PublishResponse.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.pubnub.PublishResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pubnub.PublishResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.pubnub.PublishResponse.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        message: jspb.Message.getFieldWithDefault(msg, 1, ""),
        timetoken:
          (f = msg.getTimetoken()) &&
          proto.pubnub.Timetoken.toObject(includeInstance, f),
        status: jspb.Message.getFieldWithDefault(msg, 3, 0)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pubnub.PublishResponse}
 */
proto.pubnub.PublishResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pubnub.PublishResponse();
  return proto.pubnub.PublishResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pubnub.PublishResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pubnub.PublishResponse}
 */
proto.pubnub.PublishResponse.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setMessage(value);
        break;
      case 2:
        var value = new proto.pubnub.Timetoken();
        reader.readMessage(
          value,
          proto.pubnub.Timetoken.deserializeBinaryFromReader
        );
        msg.setTimetoken(value);
        break;
      case 3:
        var value = /** @type {!proto.pubnub.PublishResponse.Status} */ (reader.readEnum());
        msg.setStatus(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pubnub.PublishResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pubnub.PublishResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pubnub.PublishResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pubnub.PublishResponse.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getTimetoken();
  if (f != null) {
    writer.writeMessage(2, f, proto.pubnub.Timetoken.serializeBinaryToWriter);
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(3, f);
  }
};

/**
 * @enum {number}
 */
proto.pubnub.PublishResponse.Status = {
  SUCCESS: 0,
  ERROR: 1
};

/**
 * optional string message = 1;
 * @return {string}
 */
proto.pubnub.PublishResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.pubnub.PublishResponse} returns this
 */
proto.pubnub.PublishResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional Timetoken timetoken = 2;
 * @return {?proto.pubnub.Timetoken}
 */
proto.pubnub.PublishResponse.prototype.getTimetoken = function() {
  return /** @type{?proto.pubnub.Timetoken} */ (jspb.Message.getWrapperField(
    this,
    proto.pubnub.Timetoken,
    2
  ));
};

/**
 * @param {?proto.pubnub.Timetoken|undefined} value
 * @return {!proto.pubnub.PublishResponse} returns this
 */
proto.pubnub.PublishResponse.prototype.setTimetoken = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.pubnub.PublishResponse} returns this
 */
proto.pubnub.PublishResponse.prototype.clearTimetoken = function() {
  return this.setTimetoken(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pubnub.PublishResponse.prototype.hasTimetoken = function() {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional Status status = 3;
 * @return {!proto.pubnub.PublishResponse.Status}
 */
proto.pubnub.PublishResponse.prototype.getStatus = function() {
  return /** @type {!proto.pubnub.PublishResponse.Status} */ (jspb.Message.getFieldWithDefault(
    this,
    3,
    0
  ));
};

/**
 * @param {!proto.pubnub.PublishResponse.Status} value
 * @return {!proto.pubnub.PublishResponse} returns this
 */
proto.pubnub.PublishResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pubnub.Timetoken.prototype.toObject = function(opt_includeInstance) {
    return proto.pubnub.Timetoken.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pubnub.Timetoken} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.pubnub.Timetoken.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        t: jspb.Message.getFieldWithDefault(msg, 1, 0),
        r: jspb.Message.getFieldWithDefault(msg, 2, 0)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pubnub.Timetoken}
 */
proto.pubnub.Timetoken.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pubnub.Timetoken();
  return proto.pubnub.Timetoken.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pubnub.Timetoken} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pubnub.Timetoken}
 */
proto.pubnub.Timetoken.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setT(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setR(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pubnub.Timetoken.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pubnub.Timetoken.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pubnub.Timetoken} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pubnub.Timetoken.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getT();
  if (f !== 0) {
    writer.writeUint64(1, f);
  }
  f = message.getR();
  if (f !== 0) {
    writer.writeUint32(2, f);
  }
};

/**
 * optional uint64 t = 1;
 * @return {number}
 */
proto.pubnub.Timetoken.prototype.getT = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.pubnub.Timetoken} returns this
 */
proto.pubnub.Timetoken.prototype.setT = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional uint32 r = 2;
 * @return {number}
 */
proto.pubnub.Timetoken.prototype.getR = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.pubnub.Timetoken} returns this
 */
proto.pubnub.Timetoken.prototype.setR = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pubnub.Location.prototype.toObject = function(opt_includeInstance) {
    return proto.pubnub.Location.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pubnub.Location} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.pubnub.Location.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        latitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
        longitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pubnub.Location}
 */
proto.pubnub.Location.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pubnub.Location();
  return proto.pubnub.Location.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pubnub.Location} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pubnub.Location}
 */
proto.pubnub.Location.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readFloat());
        msg.setLatitude(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readFloat());
        msg.setLongitude(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pubnub.Location.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pubnub.Location.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pubnub.Location} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pubnub.Location.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLatitude();
  if (f !== 0.0) {
    writer.writeFloat(1, f);
  }
  f = message.getLongitude();
  if (f !== 0.0) {
    writer.writeFloat(2, f);
  }
};

/**
 * optional float latitude = 1;
 * @return {number}
 */
proto.pubnub.Location.prototype.getLatitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(
    this,
    1,
    0.0
  ));
};

/**
 * @param {number} value
 * @return {!proto.pubnub.Location} returns this
 */
proto.pubnub.Location.prototype.setLatitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};

/**
 * optional float longitude = 2;
 * @return {number}
 */
proto.pubnub.Location.prototype.getLongitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(
    this,
    2,
    0.0
  ));
};

/**
 * @param {number} value
 * @return {!proto.pubnub.Location} returns this
 */
proto.pubnub.Location.prototype.setLongitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};

goog.object.extend(exports, proto.pubnub);
